// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: antiBruteForceService.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteForceServiceClient is the client API for AntiBruteForceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceServiceClient interface {
	AccessCheck(ctx context.Context, in *AccessCheckRequest, opts ...grpc.CallOption) (*AccessCheckResponse, error)
	ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExistInWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*ExistInListResponse, error)
	ExistInBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*ExistInListResponse, error)
}

type antiBruteForceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceServiceClient(cc grpc.ClientConnInterface) AntiBruteForceServiceClient {
	return &antiBruteForceServiceClient{cc}
}

func (c *antiBruteForceServiceClient) AccessCheck(ctx context.Context, in *AccessCheckRequest, opts ...grpc.CallOption) (*AccessCheckResponse, error) {
	out := new(AccessCheckResponse)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/AccessCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/ResetBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) RemoveFromBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/RemoveFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddToWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) RemoveFromWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/RemoveFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) ExistInWhiteList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*ExistInListResponse, error) {
	out := new(ExistInListResponse)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/ExistInWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) ExistInBlackList(ctx context.Context, in *ListCases, opts ...grpc.CallOption) (*ExistInListResponse, error) {
	out := new(ExistInListResponse)
	err := c.cc.Invoke(ctx, "/AntiBruteForceService/ExistInBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServiceServer is the server API for AntiBruteForceService service.
// All implementations must embed UnimplementedAntiBruteForceServiceServer
// for forward compatibility
type AntiBruteForceServiceServer interface {
	AccessCheck(context.Context, *AccessCheckRequest) (*AccessCheckResponse, error)
	ResetBucket(context.Context, *ResetBucketRequest) (*emptypb.Empty, error)
	AddToBlackList(context.Context, *ListCases) (*emptypb.Empty, error)
	RemoveFromBlackList(context.Context, *ListCases) (*emptypb.Empty, error)
	AddToWhiteList(context.Context, *ListCases) (*emptypb.Empty, error)
	RemoveFromWhiteList(context.Context, *ListCases) (*emptypb.Empty, error)
	ExistInWhiteList(context.Context, *ListCases) (*ExistInListResponse, error)
	ExistInBlackList(context.Context, *ListCases) (*ExistInListResponse, error)
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

// UnimplementedAntiBruteForceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServiceServer struct {
}

func (UnimplementedAntiBruteForceServiceServer) AccessCheck(context.Context, *AccessCheckRequest) (*AccessCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessCheck not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) ResetBucket(context.Context, *ResetBucketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToBlackList(context.Context, *ListCases) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) RemoveFromBlackList(context.Context, *ListCases) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlackList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddToWhiteList(context.Context, *ListCases) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) RemoveFromWhiteList(context.Context, *ListCases) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) ExistInWhiteList(context.Context, *ListCases) (*ExistInListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) ExistInBlackList(context.Context, *ListCases) (*ExistInListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInBlackList not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) mustEmbedUnimplementedAntiBruteForceServiceServer() {}

// UnsafeAntiBruteForceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServiceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServiceServer interface {
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

func RegisterAntiBruteForceServiceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServiceServer) {
	s.RegisterService(&AntiBruteForceService_ServiceDesc, srv)
}

func _AntiBruteForceService_AccessCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AccessCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/AccessCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AccessCheck(ctx, req.(*AccessCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/ResetBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).ResetBucket(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToBlackList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_RemoveFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).RemoveFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/RemoveFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).RemoveFromBlackList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddToWhiteList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_RemoveFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).RemoveFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/RemoveFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).RemoveFromWhiteList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_ExistInWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).ExistInWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/ExistInWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).ExistInWhiteList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_ExistInBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCases)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).ExistInBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AntiBruteForceService/ExistInBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).ExistInBlackList(ctx, req.(*ListCases))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForceService_ServiceDesc is the grpc.ServiceDesc for AntiBruteForceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AntiBruteForceService",
	HandlerType: (*AntiBruteForceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessCheck",
			Handler:    _AntiBruteForceService_AccessCheck_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _AntiBruteForceService_ResetBucket_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBruteForceService_AddToBlackList_Handler,
		},
		{
			MethodName: "RemoveFromBlackList",
			Handler:    _AntiBruteForceService_RemoveFromBlackList_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBruteForceService_AddToWhiteList_Handler,
		},
		{
			MethodName: "RemoveFromWhiteList",
			Handler:    _AntiBruteForceService_RemoveFromWhiteList_Handler,
		},
		{
			MethodName: "ExistInWhiteList",
			Handler:    _AntiBruteForceService_ExistInWhiteList_Handler,
		},
		{
			MethodName: "ExistInBlackList",
			Handler:    _AntiBruteForceService_ExistInBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antiBruteForceService.proto",
}
