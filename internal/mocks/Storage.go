// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"

	redis_rate "github.com/go-redis/redis_rate/v9"

	storage "github.com/Tyrqvir/anti-brute-force/internal/storage"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CheckAccessibilityByLists provides a mock function with given fields: ctx, ip
func (_m *Storage) CheckAccessibilityByLists(ctx context.Context, ip net.IP) (bool, bool) {
	ret := _m.Called(ctx, ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, net.IP) bool); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, net.IP) bool); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ExistInList provides a mock function with given fields: ctx, kindOfList, ip
func (_m *Storage) ExistInList(ctx context.Context, kindOfList storage.KindOfList, ip net.IP) int64 {
	ret := _m.Called(ctx, kindOfList, ip)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, storage.KindOfList, net.IP) int64); ok {
		r0 = rf(ctx, kindOfList, ip)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// FlushLimitByBucket provides a mock function with given fields: ctx, bucket
func (_m *Storage) FlushLimitByBucket(ctx context.Context, bucket string) {
	_m.Called(ctx, bucket)
}

// RemoveIPFromListByKind provides a mock function with given fields: ctx, kindOfList, netAddress
func (_m *Storage) RemoveIPFromListByKind(ctx context.Context, kindOfList storage.KindOfList, netAddress string) {
	_m.Called(ctx, kindOfList, netAddress)
}

// StoreIPToListByKind provides a mock function with given fields: ctx, kindOfList, netAddress
func (_m *Storage) StoreIPToListByKind(ctx context.Context, kindOfList storage.KindOfList, netAddress string) {
	_m.Called(ctx, kindOfList, netAddress)
}

// StoreLimitByIP provides a mock function with given fields: ctx, ip
func (_m *Storage) StoreLimitByIP(ctx context.Context, ip string) (*redis_rate.Result, error) {
	ret := _m.Called(ctx, ip)

	var r0 *redis_rate.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis_rate.Result); ok {
		r0 = rf(ctx, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis_rate.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreLimitByLogin provides a mock function with given fields: ctx, login
func (_m *Storage) StoreLimitByLogin(ctx context.Context, login string) (*redis_rate.Result, error) {
	ret := _m.Called(ctx, login)

	var r0 *redis_rate.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis_rate.Result); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis_rate.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreLimitByPassword provides a mock function with given fields: ctx, password
func (_m *Storage) StoreLimitByPassword(ctx context.Context, password string) (*redis_rate.Result, error) {
	ret := _m.Called(ctx, password)

	var r0 *redis_rate.Result
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis_rate.Result); ok {
		r0 = rf(ctx, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis_rate.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
